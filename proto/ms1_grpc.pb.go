// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/ms1.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Ms1Client is the client API for Ms1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Ms1Client interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	IsEvan(ctx context.Context, opts ...grpc.CallOption) (Ms1_IsEvanClient, error)
}

type ms1Client struct {
	cc grpc.ClientConnInterface
}

func NewMs1Client(cc grpc.ClientConnInterface) Ms1Client {
	return &ms1Client{cc}
}

func (c *ms1Client) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/api.ms1/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ms1Client) IsEvan(ctx context.Context, opts ...grpc.CallOption) (Ms1_IsEvanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ms1_ServiceDesc.Streams[0], "/api.ms1/IsEvan", opts...)
	if err != nil {
		return nil, err
	}
	x := &ms1IsEvanClient{stream}
	return x, nil
}

type Ms1_IsEvanClient interface {
	Send(*IsEvenNumRequest) error
	Recv() (*IsEvenNumResponse, error)
	grpc.ClientStream
}

type ms1IsEvanClient struct {
	grpc.ClientStream
}

func (x *ms1IsEvanClient) Send(m *IsEvenNumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ms1IsEvanClient) Recv() (*IsEvenNumResponse, error) {
	m := new(IsEvenNumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ms1Server is the server API for Ms1 service.
// All implementations must embed UnimplementedMs1Server
// for forward compatibility
type Ms1Server interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	IsEvan(Ms1_IsEvanServer) error
	mustEmbedUnimplementedMs1Server()
}

// UnimplementedMs1Server must be embedded to have forward compatible implementations.
type UnimplementedMs1Server struct {
}

func (UnimplementedMs1Server) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMs1Server) IsEvan(Ms1_IsEvanServer) error {
	return status.Errorf(codes.Unimplemented, "method IsEvan not implemented")
}
func (UnimplementedMs1Server) mustEmbedUnimplementedMs1Server() {}

// UnsafeMs1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ms1Server will
// result in compilation errors.
type UnsafeMs1Server interface {
	mustEmbedUnimplementedMs1Server()
}

func RegisterMs1Server(s grpc.ServiceRegistrar, srv Ms1Server) {
	s.RegisterService(&Ms1_ServiceDesc, srv)
}

func _Ms1_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ms1Server).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ms1/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ms1Server).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ms1_IsEvan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Ms1Server).IsEvan(&ms1IsEvanServer{stream})
}

type Ms1_IsEvanServer interface {
	Send(*IsEvenNumResponse) error
	Recv() (*IsEvenNumRequest, error)
	grpc.ServerStream
}

type ms1IsEvanServer struct {
	grpc.ServerStream
}

func (x *ms1IsEvanServer) Send(m *IsEvenNumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ms1IsEvanServer) Recv() (*IsEvenNumRequest, error) {
	m := new(IsEvenNumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ms1_ServiceDesc is the grpc.ServiceDesc for Ms1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ms1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ms1",
	HandlerType: (*Ms1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Ms1_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IsEvan",
			Handler:       _Ms1_IsEvan_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ms1.proto",
}
